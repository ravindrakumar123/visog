package com.vsoftcorp.usermgmt.utils;

import io.jsonwebtoken.Claims;
import io.jsonwebtoken.Jws;
import io.jsonwebtoken.Jwts;
import io.jsonwebtoken.SignatureAlgorithm;
import io.jsonwebtoken.SignatureException;
import io.jsonwebtoken.impl.compression.CompressionCodecs;

import org.apache.log4j.Logger;
import org.json.JSONObject;

import com.vsoftcorp.usermgmt.serviceimpl.SecurityServiceImpl;

public class SecurityUtils {

	private static final Logger logger = Logger.getLogger(SecurityServiceImpl.class);

	public static void main1(String[] args) {
/*		Key key = MacProvider.generateKey();
		
		System.out.println(key.getAlgorithm());
		System.out.println(key.getFormat());*/
		String key = "uyIIdLu8CmMWlLhls6oZyXoaPk8";
		String str = "eyJhbGciOiJIUzI1NiJ9.eyJjdXN0b21lcklkIjoiNDEyODIwODQiLCJpc0VuY3J5cHRlZCI6dHJ1ZX0.EbIUnCLzr64jqgwPFYbtaoJEHRecMUdmcSVDZpASR5Y";
		JSONObject jsonObject = new JSONObject();
		jsonObject.put("customerId", "41282084");
		jsonObject.put("isEncrypted", true);
		
		
		String compactJws = Jwts.builder()
				  .setSubject("Joe")
				  .signWith(SignatureAlgorithm.HS256, key)
				  .compact();
		String compactJws3 = Jwts.builder()
				  .setSubject(jsonObject.toString())
				  .signWith(SignatureAlgorithm.HS256, key)
				  .compact();
		
		String compactJws2 =  Jwts.builder()
			    .setSubject(jsonObject.toString())
			    .compressWith(CompressionCodecs.DEFLATE)
			    .signWith(SignatureAlgorithm.HS256, key)
			    .compact();
		System.out.println(compactJws);
		
		System.out.println("encoded string : \t"+encode(key, compactJws));
		
		System.out.println("amit string : \t\t"+str);
		System.out.println("encrypted string : \t"+compactJws3);
		System.out.println("encrypted string1 : \t"+compactJws2);
		
		try {

		    Jwts.parser().setSigningKey(key).parseClaimsJws(compactJws);

		    System.out.println("OK, we can trust this JWT");

		} catch (SignatureException e) {

		    System.out.println("don't trust the JWT!");
		}
		
		
		String compactJws1 =  Jwts.builder()
			    .setSubject("Joe")
			    .compressWith(CompressionCodecs.DEFLATE)
			    .signWith(SignatureAlgorithm.HS256, key)
			    .compact();
		
		
		
		System.out.println(Jwts.parser().setSigningKey(key).parseClaimsJws(compactJws).getBody().getSubject());
		System.out.println(Jwts.parser().setSigningKey(key).parseClaimsJws(compactJws1).getBody().getSubject());
		System.out.println(compactJws2);
		System.out.println(Jwts.parser().setSigningKey(key).parseClaimsJws(compactJws2).getBody().getSubject());
		System.out.println(str);
		System.out.println(Jwts.parser().setSigningKey(key).parseClaimsJws(str));
	}
	
	public static String encode(String key, String data) {
		return Jwts.builder()
				  .setSubject(data)
				  .signWith(SignatureAlgorithm.HS256, key)
				  .compact();
		
/*		  Mac sha256_HMAC;
		try {
			sha256_HMAC = Mac.getInstance("HmacSHA256");
			  SecretKeySpec secret_key = new SecretKeySpec(key.getBytes("UTF-8"), "HmacSHA256");
			  sha256_HMAC.init(secret_key);
			  return Hex.encodeHexString(sha256_HMAC.doFinal(compactJws.getBytes("UTF-8")));
		} catch (NoSuchAlgorithmException e) {
//			logger.error("", e);
			e.printStackTrace();
			return null;
		} catch (UnsupportedEncodingException e) {
//			logger.error("", e);
			e.printStackTrace();
			return null;
		} catch (InvalidKeyException e) {
//			logger.error("", e);
			e.printStackTrace();
			return null;
		}*/
	}

	public static String decode(String key, String data) {
		try {

		   Jws<Claims> jws = Jwts.parser().setSigningKey(key).parseClaimsJws(data);

		    logger.info(key +" : OK, we can trust this JWT");
		    System.out.println("OK, we can trust this JWT key and ciher text");

			return jws.getBody().getSubject();

		} catch (SignatureException e) {

		    logger.error(key +" : don't trust this JWT cipher text and the key", e);
		    System.out.println("don't trust the JWT!");
		    return null;
		}
		
	}

	public static void main(String[] args) {
		String key = "uyIIdLu8CmMWlLhls6oZyXoaPk8";
		JSONObject jsonObject = new JSONObject();
		jsonObject.put("userName", "amitmourya@gmail.com");
		jsonObject.put("password", "bvLpwcCF");
		jsonObject.put("xFactor", "dskjchskj");
		String plainStr = jsonObject.toString();
		System.out.println("plainStr : " + plainStr);
		String cipherStr = encode(key, plainStr);
		System.out.println("cipherStr : " + cipherStr);
		plainStr = decode(key, cipherStr);
		System.out.println("plainStr : " + plainStr);
	}
}
