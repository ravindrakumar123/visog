package com.vsoftcorp.usermgmt.serviceimpl;

import java.util.ArrayList;
import java.util.Date;
import java.util.List;

import javax.inject.Inject;
import javax.inject.Singleton;

import org.apache.log4j.Logger;

import com.vsoftcorp.usermgmt.constants.AppConstants;
import com.vsoftcorp.usermgmt.constants.UserStatus;
import com.vsoftcorp.usermgmt.dao.AdminDao;
import com.vsoftcorp.usermgmt.dao.RoleDao;
import com.vsoftcorp.usermgmt.dao.UserDao;
import com.vsoftcorp.usermgmt.model.InstitutionMaster;
import com.vsoftcorp.usermgmt.model.LoginMaster;
import com.vsoftcorp.usermgmt.model.PasswordRules;
import com.vsoftcorp.usermgmt.model.Roles;
import com.vsoftcorp.usermgmt.model.User;
import com.vsoftcorp.usermgmt.req.PasswordRulesReq;
import com.vsoftcorp.usermgmt.req.UserReq;
import com.vsoftcorp.usermgmt.req.UserStatusReq;
import com.vsoftcorp.usermgmt.res.AdminUserResponse;
import com.vsoftcorp.usermgmt.res.PasswordRulesRes;
import com.vsoftcorp.usermgmt.service.AdminService;
import com.vsoftcorp.usermgmt.utils.RandomUtils;

@Singleton
public class AdminServiceImpl implements AdminService {

	private static final Logger logger = Logger
			.getLogger(AdminServiceImpl.class);

	@Inject
	AdminDao dao;

	@Inject
	UserDao userDao;
	
	@Inject
	RoleDao roleDao;

	/**
	 * This method save user by using institution id and userReq
	 */
	public Long saveUser(Long institutionId, UserReq userReq) {
		
		
		InstitutionMaster institutionMaster = new InstitutionMaster();
		institutionMaster.setInstId(institutionId);

		User user = new User();
		user.setFirstName(userReq.getFirstName());
		user.setMiddleName(userReq.getMiddleName());
		user.setLastName(userReq.getLastName());
		user.setEmailId(userReq.getEmailId());
		user.setMobileNo(userReq.getMobileNo());
		user.setSecondaryEmailId(userReq.getSecondaryEmailId());
		user.setSecondaryMobileNo(userReq.getSecondaryMobileNo());

		Roles roles = new Roles();
		roles.setRoleId(userReq.getRoleId());
		user.setRole(roles);

		user.setUserName(RandomUtils.getRandomCharString(10));
		user.setPassword(RandomUtils.getRandomAlphaNumericString(8));
		user.setIsTemporaryPassword(AppConstants.TRUE_CHAR);
		user.setCreatedOn(new Date());
		user.setStatus(UserStatus.NOT_ENROLLED);

		user.setDefaultAccessLink(roleDao.getAccessLink(institutionMaster, userReq.getDefaultAccessLinkId()));

		user.setInstId(institutionMaster);

		return dao.saveUser(user);
	}

	/**
	 * This method updates user by using user id and userReq
	 */
	public void updateUser(UserReq userReq, Long userId) {

		User user = dao.getUser(userId);

		user.setFirstName(userReq.getFirstName());
		user.setMiddleName(userReq.getMiddleName());
		user.setLastName(userReq.getLastName());
		user.setMobileNo(userReq.getMobileNo());
		user.setEmailId(userReq.getEmailId());
		user.setSecondaryEmailId(userReq.getSecondaryEmailId());
		user.setSecondaryMobileNo(userReq.getSecondaryMobileNo());

		Roles roles = new Roles();
		roles.setRoleId(userReq.getRoleId());
		user.setRole(roles);

		user.setUpdatedOn(new Date());

		dao.updateUser(user);
	}

	/**
	 * This method deletes user by using user id
	 */
	public Boolean deleteUser(Long userId) {
		return dao.deleteUser(userId);
	}

	/**
	 * This method returns user by using user id 
	 */
	public AdminUserResponse getUser(Long userId) {
		User user = dao.getUser(userId);

		AdminUserResponse response = new AdminUserResponse();
		response.setFirstName(user.getFirstName());
		response.setMiddleName(user.getMiddleName());
		response.setLastName(user.getLastName());
		response.setEmailId(user.getEmailId());
		response.setMobileNo(user.getMobileNo());
		response.setSecondaryEmailId(user.getSecondaryEmailId());
		response.setSecondaryMobileNo(user.getSecondaryMobileNo());
		response.setRole(user.getRole().getRoleName());
		response.setStatus(user.getStatus());
		response.setUserId(user.getUserId());
		response.setUserName(user.getUserName());

		return response;
	}

	/**
	 * This method returns all the users
	 */
	public List<AdminUserResponse> getUsers(Long institutionId) {
		
		InstitutionMaster institutionMaster = new InstitutionMaster();
		institutionMaster.setInstId(institutionId);
		List<User> users = dao.getUsers(institutionMaster);

		AdminUserResponse response = null;
		List<AdminUserResponse> responses = new ArrayList<>();

		for (User user : users) {
			response = new AdminUserResponse();
			response.setFirstName(user.getFirstName());
			response.setMiddleName(user.getMiddleName());
			response.setLastName(user.getLastName());
			response.setEmailId(user.getEmailId());
			response.setMobileNo(user.getMobileNo());
			response.setSecondaryEmailId(user.getSecondaryEmailId());
			response.setSecondaryMobileNo(user.getSecondaryMobileNo());
			response.setRole(user.getRole().getRoleName());
			response.setStatus(user.getStatus());
			response.setUserId(user.getUserId());
			response.setUserName(user.getUserName());
			responses.add(response);
		}
		return responses;
	}
	
	/**
	 * This method saves/updates password rules by using institution id ,rulesReq and role id
	 * return true if new rule was saved
	 * return false if old rule was updated
	 */
	public Boolean saveOrUpdatePasswordRules(Long institutionId, Long roleId,
			PasswordRulesReq rulesReq) {

		InstitutionMaster institutionMaster = new InstitutionMaster();
		institutionMaster.setInstId(institutionId);

		Roles role = new Roles();
		role.setRoleId(roleId);

		PasswordRules rules = dao.getPasswordRules(role);
		
		boolean isNew = false;

		if (rules == null) {
			rules = new PasswordRules();

			rules.setInstId(institutionMaster);
			rules.setRoleId(role);
			isNew = true;

		}
		
		rules.setCheckLastPassword(rulesReq.getCheckLastPassword());
		rules.setExpiryWarningAfter(rulesReq.getExpiryWarningAfter());
		rules.setFailedLoginAttempts(rulesReq.getFailedLoginAttempts());
		rules.setMinimumLength(rulesReq.getMinimumLength());
		rules.setMinimumLowerCaseChars(rulesReq.getMinimumLowerCaseChars());
		rules.setMinimumNumericChars(rulesReq.getMinimumNumericChars());
		rules.setMinimumSpecialChars(rulesReq.getMinimumSpecialChars());
		rules.setMinimumUpperCaseChars(rulesReq.getMinimumUpperCaseChars());
		rules.setPasswordExpiryDays(rulesReq.getPasswordExpiryDays());
		rules.setPasswordKeywords(rulesReq.getPasswordKeywords());
		rules.setPasswordRuleName(rulesReq.getPasswordRuleName());
		rules.setRestrictNameInPassword(rulesReq
				.getRestrictNameInPassword() ? AppConstants.TRUE_CHAR
				: AppConstants.FALSE_CHAR);
		rules.setRestrictPasswordKeywords(rulesReq
				.getRestrictNameInPassword() ? AppConstants.TRUE_CHAR
				: AppConstants.FALSE_CHAR);
		rules.setRestrictUseridInPassword(rulesReq
				.getRestrictUseridInPassword() ? AppConstants.TRUE_CHAR
				: AppConstants.FALSE_CHAR);

		if(isNew) {
			dao.savePasswordRules(rules);
			return true;
		} else {
			dao.updatePasswordRules(rules);
			return false;
		}
		
	}

	/**
	 * This method returns password rules by using institution id and role id
	 */
	public PasswordRulesRes getPasswordRules(Long institutionId, Long roleId) {

		PasswordRulesRes rulesRes = new PasswordRulesRes();

		Roles role = new Roles();
		role.setRoleId(roleId);

		PasswordRules rules = dao.getPasswordRules(role);
		
		if(rules != null) {
			rulesRes.setCheckLastPassword(rules.getCheckLastPassword());
			rulesRes.setExpiryWarningAfter(rules.getExpiryWarningAfter());
			rulesRes.setFailedLoginAttempts(rules.getFailedLoginAttempts());
			rulesRes.setMinimumLength(rules.getMinimumLength());
			rulesRes.setMinimumLowerCaseChars(rules.getMinimumLowerCaseChars());
			rulesRes.setMinimumNumericChars(rules.getMinimumNumericChars());
			rulesRes.setMinimumSpecialChars(rules.getMinimumSpecialChars());
			rulesRes.setMinimumUpperCaseChars(rules.getMinimumUpperCaseChars());
			rulesRes.setPasswordExpiryDays(rules.getPasswordExpiryDays());
			rulesRes.setPasswordKeywords(rules.getPasswordKeywords());
			rulesRes.setPasswordRuleName(rules.getPasswordRuleName());
			rulesRes.setRestrictNameInPassword(AppConstants.TRUE_CHAR.equals(rules
					.getRestrictNameInPassword()));
			rulesRes.setRestrictPasswordKeywords(AppConstants.TRUE_CHAR
					.equals(rules.getRestrictNameInPassword()));
			rulesRes.setRestrictUseridInPassword(AppConstants.TRUE_CHAR
					.equals(rules.getRestrictUseridInPassword()));
			return rulesRes;
		}
		return null;

	}

	/**
	 * This method updates user status by using user id and statusReq  
	 */
	public void updateUserStatus(Long institutionId, Long userId, UserStatusReq statusReq) {

		User user = dao.getUser(userId);

		user.setStatus(statusReq.getStatus());
		user.setUpdatedOn(new Date());

		dao.updateUser(user);
		
		InstitutionMaster institutionMaster = new InstitutionMaster();
		institutionMaster.setInstId(institutionId);
		
		Date curDate = new Date();

		if(UserStatus.VERIFIED.equals(statusReq.getStatus())) {
			LoginMaster loginMaster = new LoginMaster();
			loginMaster.setInstId(institutionMaster);
			loginMaster.setUserId(user);
			loginMaster.setCreatedOn(curDate);
			loginMaster.setSuccessInd(AppConstants.TRUE_CHAR);
			loginMaster.setLastLoginDate(curDate);
			userDao.saveLoginMaster(loginMaster);
		}

	}

	/**
	 * This method updates password by using user id 
	 */
	public void resetPassword(Long userId) {
		User user = dao.getUser(userId);
		user.setPassword(RandomUtils.getRandomAlphaNumericString(8));
		user.setIsTemporaryPassword(AppConstants.TRUE_CHAR);
		user.setUpdatedOn(new Date());
		dao.updateUser(user);
	}

}
