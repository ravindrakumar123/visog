package com.vsoftcorp.usermgmt.rest.controller;
 
import javax.inject.Inject;
import javax.ws.rs.Consumes;
import javax.ws.rs.DELETE;
import javax.ws.rs.GET;
import javax.ws.rs.POST;
import javax.ws.rs.PUT;
import javax.ws.rs.Path;
import javax.ws.rs.PathParam;
import javax.ws.rs.Produces;

import org.apache.log4j.Logger;

import com.vsoftcorp.usermgmt.constants.Status;
import com.vsoftcorp.usermgmt.req.PasswordRulesReq;
import com.vsoftcorp.usermgmt.req.UserReq;
import com.vsoftcorp.usermgmt.req.UserStatusReq;
import com.vsoftcorp.usermgmt.res.PasswordRulesRes;
import com.vsoftcorp.usermgmt.res.UserResponse;
import com.vsoftcorp.usermgmt.res.VsoftResponse;
import com.vsoftcorp.usermgmt.service.AdminService;
 
@Path("/v1/fi")
public class AdminController {
	
	private static final Logger logger = Logger.getLogger(AdminController.class);
	
	@Inject
	private AdminService service;
 
	/**
	 * This method creates the user for the given institution
	 * 
	 * @param institutionId
	 * @param userReq
	 * @return
	 */
	@POST
	@Consumes("application/json")
	@Produces("application/json")
	@Path("/{id}/users")
	public VsoftResponse createUser(@PathParam("id") Long institutionId, UserReq userReq) {
		
		VsoftResponse response = new VsoftResponse();
		Long userId = service.saveUser(institutionId, userReq);
		logger.info("User id is  : "+userId);
		
		UserResponse data = new UserResponse();
		data.setUserId(userId);
		response.setData(data);
		response.setStatusCode(Status.STATUSCODE_SUCCESS);
		response.setMessage("User Created Successfully");
		response.setStatus(Status.STATUS_SUCCESS);
 
		logger.info("User Created Successfully : "+userId);

		return response;
	}	

	/**
	 * This method updates the user data for the given user id
	 * 
	 * @param institutionId
	 * @param userId
	 * @param userReq
	 * @return
	 */
	@PUT
	@Consumes("application/json")
	@Produces("application/json")
	@Path("/{id}/users/{userId}")
	public VsoftResponse updateUser(@PathParam("id") Long institutionId, 
									@PathParam("userId") Long userId, UserReq userReq) {
		
		VsoftResponse response = new VsoftResponse();
		service.updateUser(userReq, userId);
		
		response.setStatusCode(Status.STATUSCODE_SUCCESS);
		response.setMessage("User Updated Successfully");
		response.setStatus(Status.STATUS_SUCCESS);
 
		logger.info("User Updated Successfully : "+userId);

		return response;
	}
	
	/**
	 * This method deletes the user data for the given user id
	 * 
	 * @param instId
	 * @param userId
	 * @return
	 */
	@DELETE
	@Produces("application/json")
	@Path("/{id}/users/{userId}")
	public VsoftResponse deleteUser(@PathParam("id") Long instId, @PathParam("userId") Long userId) {
		VsoftResponse response = new VsoftResponse();
		if(service.deleteUser(userId)) {
			response.setStatusCode(Status.STATUSCODE_SUCCESS);
			response.setMessage("User Deleted Successfully");
			response.setStatus(Status.STATUS_SUCCESS);
	 
			logger.info("User Deleted Successfully : " + userId);
		} else {
			response.setStatusCode(Status.STATUSCODE_FAIL);
			response.setMessage("This User already Deleted");
			response.setStatus(Status.STATUS_FAIL);
	 
			logger.error("User Deleted Failed : " + userId + ". This user already exists.");
		}
		
		return response;
	}
	
	/**
	 * This method returns the user for the given user id
	 * 
	 * @param instId
	 * @param userId
	 * @return
	 */
	@GET
	@Produces("application/json")
	@Path("/{id}/users/{userId}")
	public VsoftResponse getUser(@PathParam("id") Long instId, @PathParam("userId") Long userId) {
		
		VsoftResponse response = new VsoftResponse();
		response.setData(service.getUser(userId));
		
		response.setStatusCode(Status.STATUSCODE_SUCCESS);
		response.setMessage("User data fetched Successfully");
		response.setStatus(Status.STATUS_SUCCESS);
 
		logger.info("User data fetched Successfully : " + userId);
	
				
		return response;
	}
	
	/**
	 * This method returns all the users for the given institution id
	 * 
	 * @param instId
	 * @return
	 */
	@GET
	@Produces("application/json")
	@Path("/{id}/users")
	public VsoftResponse getUsers(@PathParam("id") Long instId) {
		
		VsoftResponse response = new VsoftResponse();
		response.setData(service.getUsers(instId));
		
		response.setStatusCode(Status.STATUSCODE_SUCCESS);
		response.setMessage("Users data fetched Successfully");
		response.setStatus(Status.STATUS_SUCCESS);
 
		logger.info("Users data fetched Successfully..");
				
		return response;
	}
	
	/**
	 * This method saves/updates the password rule for the given role id
	 * 
	 * @param institutionId
	 * @param roleId
	 * @param rulesReq
	 * @return
	 */
	@POST
	@Consumes("application/json")
	@Produces("application/json")
	@Path("/{id}/roles/{roleId}/passwordRules")
	public VsoftResponse saveOrUpdatePasswordRule(@PathParam("id") Long institutionId, 
								@PathParam("roleId") Long roleId, PasswordRulesReq rulesReq) {
		
		VsoftResponse response = new VsoftResponse();
		if(service.saveOrUpdatePasswordRules(institutionId, roleId, rulesReq)) {
			response.setStatusCode(Status.STATUSCODE_SUCCESS);
			response.setMessage("Password rule Created Successfully");
			response.setStatus(Status.STATUS_SUCCESS);
	 
			logger.info("Password rule Created Successfully");
		} else {
			response.setStatusCode(Status.STATUSCODE_SUCCESS);
			response.setMessage("Password rule Updated Successfully");
			response.setStatus(Status.STATUS_SUCCESS);
	 
			logger.info("Password rule Updated Successfully");
		}
		
		return response;
	}	

	/**
	 * This method returns the password rule for the given role id
	 * 
	 * @param instId
	 * @param roleId
	 * @return
	 */
	@GET
	@Produces("application/json")
	@Path("/{id}/roles/{roleId}/passwordRules")
	public VsoftResponse getPasswordRule(@PathParam("id") Long instId, @PathParam("roleId") Long roleId) {
		
		VsoftResponse response = new VsoftResponse();
		
		PasswordRulesRes passwordRulesRes = service.getPasswordRules(instId, roleId);
		if(passwordRulesRes != null) {
			response.setData(passwordRulesRes);
			
			response.setStatusCode(Status.STATUSCODE_SUCCESS);
			response.setMessage("Password rule fetched Successfully");
			response.setStatus(Status.STATUS_SUCCESS);
	 
			logger.info("Password rule fetched Successfully");
		
		} else {
			response.setData(passwordRulesRes);
			
			response.setStatusCode(Status.STATUSCODE_FAIL);
			response.setMessage("Password rule doesn't exist for this role");
			response.setStatus(Status.STATUS_FAIL);
	 
			logger.info("Password rule doesn't exist for this role");
		
		}
		
		return response;
	}
	
	/**
	 * This method updates the user status for the given user id
	 * 
	 * @param institutionId
	 * @param userId
	 * @param statusReq
	 * @return
	 */
	@PUT
	@Consumes("application/json")
	@Produces("application/json")
	@Path("/{id}/users/{userId}/changestatus")
	public VsoftResponse updateUserStatus(@PathParam("id") Long institutionId, 
				@PathParam("userId") Long userId, UserStatusReq statusReq) {
		
		VsoftResponse response = new VsoftResponse();
		service.updateUserStatus(institutionId, userId, statusReq);
		
		response.setStatusCode(Status.STATUSCODE_SUCCESS);
		response.setMessage("User status changed successfully");
		response.setStatus(Status.STATUS_SUCCESS);
 
		logger.info("User status changed successfully");

		return response;
	}
	
	/**
	 * This method updates the password for the given user id
	 * 
	 * @param institutionId
	 * @param userId
	 * @return
	 */
	@PUT
	@Produces("application/json")
	@Path("/{id}/users/{userId}/resetPassword")
	public VsoftResponse resetPassword(@PathParam("id") Long institutionId, 
			@PathParam("userId") Long userId) {
		
		VsoftResponse response = new VsoftResponse();
		service.resetPassword(userId);
		
		response.setStatusCode(Status.STATUSCODE_SUCCESS);
		response.setMessage("User password reset successfully");
		response.setStatus(Status.STATUS_SUCCESS);
 
		logger.info("User password reset successfully");

		return response;
	}

}