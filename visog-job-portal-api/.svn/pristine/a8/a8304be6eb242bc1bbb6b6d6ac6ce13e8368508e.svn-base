package com.vsoftcorp.usermgmt.rest.controller;

import javax.inject.Inject;
import javax.ws.rs.Consumes;
import javax.ws.rs.CookieParam;
import javax.ws.rs.DELETE;
import javax.ws.rs.GET;
import javax.ws.rs.POST;
import javax.ws.rs.PUT;
import javax.ws.rs.Path;
import javax.ws.rs.PathParam;
import javax.ws.rs.Produces;

import org.apache.log4j.Logger;

import com.vsoftcorp.usermgmt.constants.Status;
import com.vsoftcorp.usermgmt.req.ListRolesPrevilegesReq;
import com.vsoftcorp.usermgmt.req.RolePrevilegesNameReq;
import com.vsoftcorp.usermgmt.req.RolesPrevilegesReqs;
import com.vsoftcorp.usermgmt.req.SecurityQuestionsReq;
import com.vsoftcorp.usermgmt.req.UserSecurityQuestionsReq;
import com.vsoftcorp.usermgmt.req.UsersReq;
import com.vsoftcorp.usermgmt.res.DataIdResponse;
import com.vsoftcorp.usermgmt.res.UserSecurityQuestionsVerifyRes;
import com.vsoftcorp.usermgmt.res.VsoftResponse;
import com.vsoftcorp.usermgmt.service.SecurityService;
import com.vsoftcorp.usermgmt.utils.ParamUtils;

@Path("/v1/fi")
public class SecurityController {

	private static final Logger logger = Logger.getLogger(SecurityController.class);

	private @CookieParam("User-Identifier") String userIdentifier;
	

	@Inject
	private SecurityService service;

	/**
	 * This method creates the security questions for the given institution
	 * 
	 * @param institutionId
	 * @param securityQuestionsReq
	 * @return
	 */
	@POST
	@Consumes("application/json")
	@Produces("application/json")
	@Path("/{id}/securityQuestions")
	public VsoftResponse createSecurityQuestions(@PathParam("id") String instStr,
																	SecurityQuestionsReq securityQuestionsReq) {

		Long instId = ParamUtils.getLongParam(instStr, userIdentifier);

		VsoftResponse response = new VsoftResponse();
		Long securityQuestionId = service.saveSecurityQuestions(instId, securityQuestionsReq);

		DataIdResponse data = new DataIdResponse();
		data.setId(securityQuestionId);
		response.setData(data);
		response.setStatusCode(Status.STATUSCODE_SUCCESS);
		response.setMessage("Security Question Created Successfully");
		response.setStatus(Status.STATUS_SUCCESS);

		logger.info("Security Question Created Successfully : " + securityQuestionId);

		return response;
	}

	/**
	 * This method returns the security questions for the given institution id
	 * 
	 * @param institutionId
	 * @return
	 */
	@GET
	@Produces("application/json")
	@Path("/{id}/securityQuestions")
	public VsoftResponse getSecurityQuestions(@PathParam("id") String instStr) {

		Long instId = ParamUtils.getLongParam(instStr, userIdentifier);

		VsoftResponse response = new VsoftResponse();
		response.setData(service.getSecurityQuestions(instId));

		response.setStatusCode(Status.STATUSCODE_SUCCESS);
		response.setMessage("Security Questions fetched Successfully");
		response.setStatus(Status.STATUS_SUCCESS);

		logger.info("Security Questions fetched Successfully : ");

		return response;
	}

	/**
	 * This method returns the security questions for the given question id
	 * 
	 * @param institutionId
	 * @param questionId
	 * @return
	 */
	@GET
	@Produces("application/json")
	@Path("/{id}/securityQuestions/{questionId}")
	public VsoftResponse getSecurityQuestion(@PathParam("id") String instStr,
																		@PathParam("questionId") String quesStr) {

		Long instId = ParamUtils.getLongParam(instStr, userIdentifier);
		Long questionId = ParamUtils.getLongParam(quesStr, userIdentifier);

		VsoftResponse response = new VsoftResponse();
		response.setData(service.getSecurityQuestion(questionId));

		response.setStatusCode(Status.STATUSCODE_SUCCESS);
		response.setMessage("Security Question fetched Successfully");
		response.setStatus(Status.STATUS_SUCCESS);

		logger.info("Security Question fetched Successfully : "
				+ questionId);

		return response;
	}

	/**
	 * This method updates the security question for the given question id
	 * 
	 * @param institutionId
	 * @param securityQuestionsReq
	 * @param questionId
	 * @return
	 */
	@PUT
	@Consumes("application/json")
	@Produces("application/json")
	@Path("/{id}/securityQuestions/{questionId}")
	public VsoftResponse updateSecurityQuestion(@PathParam("id") String instStr,
						SecurityQuestionsReq securityQuestionsReq, @PathParam("questionId") String quesStr) {

		Long instId = ParamUtils.getLongParam(instStr, userIdentifier);
		Long questionId = ParamUtils.getLongParam(quesStr, userIdentifier);

		VsoftResponse response = new VsoftResponse();
		service.updateSecurityQuestion(securityQuestionsReq, questionId);

		response.setStatusCode(Status.STATUSCODE_SUCCESS);
		response.setMessage("Security Question Updated Successfully");
		response.setStatus(Status.STATUS_SUCCESS);

		logger.info("Security Question Updated Successfully ");

		return response;
	}

	/**
	 * This method deletes the security question for the given question id
	 * 
	 * @param institutionId
	 * @param questionId
	 * @return
	 */
	@DELETE
	@Produces("application/json")
	@Path("/{id}/securityQuestions/{questionId}")
	public VsoftResponse deleteSecurityQuestion(@PathParam("id") String instStr, 
															@PathParam("questionId") String quesStr) {

		Long instId = ParamUtils.getLongParam(instStr, userIdentifier);
		Long questionId = ParamUtils.getLongParam(quesStr, userIdentifier);

		VsoftResponse response = new VsoftResponse();
		Boolean isDeleted = service.deleteSecurityQuestion(questionId);

		if (isDeleted) {
			response.setStatusCode(Status.STATUSCODE_SUCCESS);
			response.setMessage("Security Question Deleted Successfully");
			response.setStatus(Status.STATUS_SUCCESS);

			logger.info("Security Question Deleted Successfully : "
					+ questionId);

		} else {
			response.setStatusCode(Status.STATUSCODE_FAIL);
			response.setMessage("Security Question Deletion Failed");
			response.setStatus(Status.STATUS_FAIL);

			logger.info("Security Question Deletion Failed : " + questionId);
		}
		return response;
	}

	/**
	 * This method returns the random security questions for the given user id
	 * 
	 * @param institutionId
	 * @param userId
	 * @return
	 */
	@GET
	@Produces("application/json")
	@Path("/{id}/users/{userId}/securityQuestions")
	public VsoftResponse getRandomSecurityQuestions(@PathParam("id") String instStr, 
																@PathParam("userId") String userStr) {

		Long instId = ParamUtils.getLongParam(instStr, userIdentifier);
		Long userId = ParamUtils.getLongParam(userStr, userIdentifier);

		VsoftResponse response = new VsoftResponse();
		response.setData(service.getRandomSecurityQuestions(userId));

		response.setStatusCode(Status.STATUSCODE_SUCCESS);
		response.setMessage("Random Security Questions fetched Successfully");
		response.setStatus(Status.STATUS_SUCCESS);

		logger.info("Random Security Questions fetched Successfully : ");

		return response;
	}

	/**
	 * This method save the user security questions for the given user id 
	 * 
	 * @param institutionId
	 * @param userSecurityQuestionsReq
	 * @param userId
	 * @return
	 */
	@POST
	@Consumes("application/json")
	@Produces("application/json")
	@Path("/{id}/users/{userId}/securityQuestions")
	public VsoftResponse saveUserSecurityQuestions(@PathParam("id") String instStr,
			UserSecurityQuestionsReq userSecurityQuestionsReq, @PathParam("userId") String userStr) {

		Long instId = ParamUtils.getLongParam(instStr, userIdentifier);
		Long userId = ParamUtils.getLongParam(userStr, userIdentifier);

		VsoftResponse response = new VsoftResponse();
		service.saveUserSecurityQuestions(instId, userSecurityQuestionsReq, userId);

		response.setStatusCode(Status.STATUSCODE_SUCCESS);
		response.setMessage("Security Questions saved Successfully");
		response.setStatus(Status.STATUS_SUCCESS);
		logger.info("Security Questions saved Successfully");
		return response;
	}

	/**
	 * This method updates the user security questions for the given user id
	 * 
	 * @param institutionId
	 * @param userId
	 * @param userSecurityQuestionsReq
	 * @return
	 */
	@PUT
	@Consumes("application/json")
	@Produces("application/json")
	@Path("/{id}/users/{userId}/securityQuestions")
	public VsoftResponse updateUserSecurityQuestions(@PathParam("id") String instStr,
							@PathParam("userId") String userStr, UserSecurityQuestionsReq userSecurityQuestionsReq) {

		Long instId = ParamUtils.getLongParam(instStr, userIdentifier);
		Long userId = ParamUtils.getLongParam(userStr, userIdentifier);

		VsoftResponse response = new VsoftResponse();
		service.updateUserSecurityQuestions(userSecurityQuestionsReq, userId, instId);

		response.setStatusCode(Status.STATUSCODE_SUCCESS);
		response.setMessage("Updated User Security Questions Successfully");
		response.setStatus(Status.STATUS_SUCCESS);

		logger.info("Updated User Security Questions Successfully");

		return response;
	}

	/**
	 * This method verifies the user security questions for the given user id
	 * 
	 * @param institutionId
	 * @param userSecurityQuestionsReq
	 * @param userId
	 * @return
	 */
	@POST
	@Consumes("application/json")
	@Produces("application/json")
	@Path("/{id}/users/{userId}/securityQuestions/verify")
	public VsoftResponse verifyUserSecurityQuestions(@PathParam("id") String instStr,
			UserSecurityQuestionsReq userSecurityQuestionsReq, @PathParam("userId") String userStr) {

		Long instId = ParamUtils.getLongParam(instStr, userIdentifier);
		Long userId = ParamUtils.getLongParam(userStr, userIdentifier);

		VsoftResponse response = new VsoftResponse();
		String isVerified = service.verifyUserSecurityQuestions(userSecurityQuestionsReq, userId, instId);
		if (isVerified != null) {
			
			if(!"VERIFIED".equals(isVerified)) {
				UserSecurityQuestionsVerifyRes data = new UserSecurityQuestionsVerifyRes();
				data.setxFactor(isVerified);
				response.setData(data);
			}
			response.setStatusCode(Status.STATUSCODE_SUCCESS);
			response.setMessage("Security Questions Validated Successfully ");
			response.setStatus(Status.STATUS_SUCCESS);
			logger.info("Security Questions Validated Successfully ");
		} else {
			response.setStatusCode(Status.STATUSCODE_FAIL);
			response.setMessage("Entered Answers were Incorrect");
			response.setStatus(Status.STATUS_FAIL);
			logger.info("Entered Answers Were Incorrect ");
		}

		return response;
	}

	/**
	 * This method reruns the user saved security questions and answers
	 * @param institutionId
	 * @param userId
	 * @return
	 */
	@GET
	@Produces("application/json")
	@Path("/{id}/users/{userId}/securityQuestionsAnswers")
	public VsoftResponse securityQuestionsAnswers(@PathParam("id") String instStr, 
																			@PathParam("userId") String userStr) {

		Long instId = ParamUtils.getLongParam(instStr, userIdentifier);
		Long userId = ParamUtils.getLongParam(userStr, userIdentifier);

		VsoftResponse response = new VsoftResponse();
		response.setData(service.getUserSecurityQuestionsAnswers(userId));
		response.setStatusCode(Status.STATUSCODE_SUCCESS);
		response.setMessage("User Security Questions and Answes fetched Successfully");
		response.setStatus(Status.STATUS_SUCCESS);
		logger.info("User Security Questions and Answes fetched Successfully");

		return response;
	}

	/**
	 * This method reset/deletes the user security questions for the given user id
	 * 
	 * @param institutionId
	 * @param userId
	 * @return
	 */
	@DELETE
	@Produces("application/json")
	@Path("/{id}/users/{userId}/securityQuestions")
	public VsoftResponse deleteUserSecurityQuestions(@PathParam("id") String instStr, 
																@PathParam("userId") String userStr) {

		Long instId = ParamUtils.getLongParam(instStr, userIdentifier);
		Long userId = ParamUtils.getLongParam(userStr, userIdentifier);
		VsoftResponse response = new VsoftResponse();
		service.deleteUserSecurityQuestions(userId);
		response.setStatusCode(Status.STATUSCODE_SUCCESS);
		response.setMessage("Security Questions Reset Successfully ");
		response.setStatus(Status.STATUS_SUCCESS);
		logger.info("Security Questions reset Successfully ");
		return response;
	}

	/**
	 * This method reset/deletes the user security questions for the given users
	 * 
	 * @param institutionId
	 * @param usersReq
	 * @return
	 */
	@POST
	@Produces("application/json")
	@Path("/{id}/resetSecurityQuestions")
	public VsoftResponse deleteUsersSecurityQuestions(@PathParam("id") String instStr, UsersReq usersReq) {

		Long instId = ParamUtils.getLongParam(instStr, userIdentifier);
		VsoftResponse response = new VsoftResponse();
		service.deleteUserSecurityQuestions(usersReq.getUsers());
		response.setStatusCode(Status.STATUSCODE_SUCCESS);
		response.setMessage("Security Questions Reset Successfully for the given users ");
		response.setStatus(Status.STATUS_SUCCESS);
		logger.info("Security Questions reset Successfully for the given users ");
		return response;
	}

	/**
	 * This method creates the role previleges for the given institution id
	 * 
	 * @param institutionId
	 * @param rolePrevilegesReq
	 * @return
	 */
	@POST
	@Consumes("application/json")
	@Produces("application/json")
	@Path("/{id}/rolePrevileges/{roleId}")
	public VsoftResponse createRolePrevileges(@PathParam("id") String instStr, 
									@PathParam("roleId") String roleStr, ListRolesPrevilegesReq accessLinksList) {

		Long instId = ParamUtils.getLongParam(instStr, userIdentifier);
		Long roleId = ParamUtils.getLongParam(roleStr, userIdentifier);

		VsoftResponse response = new VsoftResponse();
		service.saveRolePrevileges(instId, roleId, accessLinksList.getAccessLinks());
		response.setStatusCode(Status.STATUSCODE_SUCCESS);
		response.setMessage("Role Previleges Created Successfully");
		response.setStatus(Status.STATUS_SUCCESS);

		logger.info("Role Previleges Created Successfully ");

		return response;
	}

	/**
	 * This method deletes the role previleges for the given role id
	 * 
	 * @param institutionId
	 * @param roleId
	 * @return
	 */
	@DELETE
	@Produces("application/json")
	@Path("/{id}/rolePrevileges/{roleId}")
	public VsoftResponse deleteRolePrevileges(@PathParam("id") String instStr, 
											@PathParam("roleId") String roleStr) {

		Long instId = ParamUtils.getLongParam(instStr, userIdentifier);
		Long roleId = ParamUtils.getLongParam(roleStr, userIdentifier);

		VsoftResponse response = new VsoftResponse();
		service.deleteRolePrevileges(roleId);
		response.setStatusCode(Status.STATUSCODE_SUCCESS);
		response.setMessage("Role Previleges Deleted Successfully ");
		response.setStatus(Status.STATUS_SUCCESS);
		logger.info("Role Previleges Deleted Successfully ");
		return response;
	}

	/**
	 * This method updates the role previleges for the given institution id
	 * 
	 * @param institutionId
	 * @param rolePrevilegesReq
	 * @return
	 */
	@PUT
	@Consumes("application/json")
	@Produces("application/json")
	@Path("/{id}/rolePrevileges/{roleId}")
	public VsoftResponse updateRolePrevileges(@PathParam("id") String instStr,
								@PathParam("roleId") String roleStr, ListRolesPrevilegesReq accessLinksList) {

		Long instId = ParamUtils.getLongParam(instStr, userIdentifier);
		Long roleId = ParamUtils.getLongParam(roleStr, userIdentifier);

		VsoftResponse response = new VsoftResponse();
		service.updateRolePrevileges(instId, roleId, accessLinksList.getAccessLinks());

		response.setStatusCode(Status.STATUSCODE_SUCCESS);
		response.setMessage("Role Previleges Updated Successfully");
		response.setStatus(Status.STATUS_SUCCESS);

		logger.info("Role Previleges Updated Successfully");

		return response;
	}

	/**
	 * This method returns the role previleges for the given role id
	 * 
	 * @param institutionId
	 * @param roleId
	 * @return
	 */
	@GET
	@Produces("application/json")
	@Path("/{id}/rolePrevileges/{roleId}")
	public VsoftResponse getRolePrevileges(@PathParam("id") String instStr, @PathParam("roleId") String roleStr) {

		Long instId = ParamUtils.getLongParam(instStr, userIdentifier);
		Long roleId = ParamUtils.getLongParam(roleStr, userIdentifier);

		VsoftResponse response = new VsoftResponse();
		response.setData(service.getRolePrevileges(roleId));

		response.setStatusCode(Status.STATUSCODE_SUCCESS);
		response.setMessage("Role Previleges data fetched Successfully");
		response.setStatus(Status.STATUS_SUCCESS);

		logger.info("Role Previleges data fetched Successfully ");

		return response;
	}
	
	/**
	 * This method creates the role with Previleges for the given institution id
	 * 
	 * @param institutionId
	 * @param rolePrevilegesReq
	 * @return
	 */
	@POST
	@Consumes("application/json")
	@Produces("application/json")
	@Path("/{id}/rolePrevileges")
	public VsoftResponse createRolePrevileges(@PathParam("id") String instStr, 
														RolePrevilegesNameReq rolePrevilegesReq) {

		Long instId = ParamUtils.getLongParam(instStr, userIdentifier);

		VsoftResponse response = new VsoftResponse();
		Boolean isRoleCreated = service.saveRolePrevileges(instId, rolePrevilegesReq);
		
		if(isRoleCreated) {		
			response.setStatusCode(Status.STATUSCODE_SUCCESS);
			response.setMessage("Role Created with previleges successfully");
			response.setStatus(Status.STATUS_SUCCESS);
			logger.info("Role Created with previleges successfully");
		} else {
			response.setStatusCode(Status.STATUSCODE_FAIL);
			response.setMessage("Role already existed with the given name : " +rolePrevilegesReq.getRoleName());
			response.setStatus(Status.STATUS_FAIL);
			logger.info("Role already existed with the given name : " + rolePrevilegesReq.getRoleName());
		}
		return response;
	}

	/**
	 * This method returns the roles previleges for the given institution 
	 * 
	 * @param institutionId
	 * @return
	 */
	@GET
	@Produces("application/json")
	@Path("/{id}/roles/previleges")
	public VsoftResponse getRolesPrevileges(@PathParam("id") String instStr) {

		Long instId = ParamUtils.getLongParam(instStr, userIdentifier);

		VsoftResponse response = new VsoftResponse();
		response.setData(service.getRolesPrevileges(instId));

		response.setStatusCode(Status.STATUSCODE_SUCCESS);
		response.setMessage("Roles fetched with previleges successfully");
		response.setStatus(Status.STATUS_SUCCESS);

		logger.info("Roles fetched with previleges successfully");

		return response;
	}
	
	/**
	 * This method creates the role previleges for the given institution id
	 * 
	 * @param institutionId
	 * @param rolePrevilegesReq
	 * @return
	 */
	@PUT
	@Consumes("application/json")
	@Produces("application/json")
	@Path("/{id}/roles/previleges")
	public VsoftResponse updateRolesPrevileges(@PathParam("id") String instStr,
					RolesPrevilegesReqs rolesPrevilegesReqs) {

		Long instId = ParamUtils.getLongParam(instStr, userIdentifier);

		VsoftResponse response = new VsoftResponse();
		service.saveRolesPrevileges(instId, rolesPrevilegesReqs.getPrevileges());
		response.setStatusCode(Status.STATUSCODE_SUCCESS);
		response.setMessage("Roles Updated with their previleges successfully");
		response.setStatus(Status.STATUS_SUCCESS);

		logger.info("Roles Updated with their previleges successfully");

		return response;
	}

}