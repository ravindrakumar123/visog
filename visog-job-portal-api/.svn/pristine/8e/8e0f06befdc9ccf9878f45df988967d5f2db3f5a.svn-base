package com.vsoftcorp.usermgmt.utils;

import io.jsonwebtoken.Jwts;
import io.jsonwebtoken.SignatureAlgorithm;
import io.jsonwebtoken.SignatureException;
import io.jsonwebtoken.impl.compression.CompressionCodecs;

import java.io.UnsupportedEncodingException;
import java.security.InvalidKeyException;
import java.security.NoSuchAlgorithmException;

import javax.crypto.Mac;
import javax.crypto.spec.SecretKeySpec;

import org.apache.commons.codec.binary.Hex;
import org.json.JSONObject;

public class SecurityUtils {

	public static void main(String[] args) {
/*		Key key = MacProvider.generateKey();
		
		System.out.println(key.getAlgorithm());
		System.out.println(key.getFormat());*/
		String key = "uyIIdLu8CmMWlLhls6oZyXoaPk8";
		String str = "eyJhbGciOiJIUzI1NiJ9.eyJjdXN0b21lcklkIjoiNDEyODIwODQiLCJpc0VuY3J5cHRlZCI6dHJ1ZX0.EbIUnCLzr64jqgwPFYbtaoJEHRecMUdmcSVDZpASR5Y";
		JSONObject jsonObject = new JSONObject();
		jsonObject.put("customerId", "41282084");
		jsonObject.put("isEncrypted", true);
		
		
		String compactJws = Jwts.builder()
				  .setSubject("Joe")
				  .signWith(SignatureAlgorithm.HS256, key)
				  .compact();
		String compactJws3 = Jwts.builder()
				  .setSubject(jsonObject.toString())
				  .signWith(SignatureAlgorithm.HS256, key)
				  .compact();
		
		String compactJws2 =  Jwts.builder()
			    .setSubject(jsonObject.toString())
			    .compressWith(CompressionCodecs.DEFLATE)
			    .signWith(SignatureAlgorithm.HS256, key)
			    .compact();
		System.out.println(compactJws);
		
		System.out.println("encoded string : \t"+encode(key, compactJws));
		
		System.out.println("amit string : \t\t"+str);
		System.out.println("encrypted string : \t"+compactJws3);
		System.out.println("encrypted string1 : \t"+compactJws2);
		
		try {

		    Jwts.parser().setSigningKey(key).parseClaimsJws(compactJws);

		    System.out.println("OK, we can trust this JWT");

		} catch (SignatureException e) {

		    System.out.println("don't trust the JWT!");
		}
		
		
		String compactJws1 =  Jwts.builder()
			    .setSubject("Joe")
			    .compressWith(CompressionCodecs.DEFLATE)
			    .signWith(SignatureAlgorithm.HS256, key)
			    .compact();
		
		
		
		System.out.println(Jwts.parser().setSigningKey(key).parseClaimsJws(compactJws).getBody().getSubject());
		System.out.println(Jwts.parser().setSigningKey(key).parseClaimsJws(compactJws1).getBody().getSubject());
		System.out.println(compactJws2);
		System.out.println(Jwts.parser().setSigningKey(key).parseClaimsJws(compactJws2).getBody().getSubject());
		System.out.println(str);
		System.out.println(Jwts.parser().setSigningKey(key).parseClaimsJws(str));
	}
	
	public static String encode(String key, String data) {
		  Mac sha256_HMAC;
		try {
			sha256_HMAC = Mac.getInstance("HmacSHA256");
			  SecretKeySpec secret_key = new SecretKeySpec(key.getBytes("UTF-8"), "HmacSHA256");
			  sha256_HMAC.init(secret_key);
			  return Hex.encodeHexString(sha256_HMAC.doFinal(data.getBytes("UTF-8")));
		} catch (NoSuchAlgorithmException e) {
			e.printStackTrace();
			return null;
		} catch (UnsupportedEncodingException e) {
			e.printStackTrace();
			return null;
		} catch (InvalidKeyException e) {
			e.printStackTrace();
			return null;
		}
	}

}
