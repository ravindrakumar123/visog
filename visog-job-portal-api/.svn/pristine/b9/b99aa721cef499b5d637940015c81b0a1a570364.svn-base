package com.vsoftcorp.usermgmt.servlet;

import java.io.IOException;
import java.util.Date;

import javax.inject.Inject;
import javax.ws.rs.container.ContainerRequestContext;
import javax.ws.rs.container.ContainerRequestFilter;
import javax.ws.rs.container.ContainerResponseContext;
import javax.ws.rs.container.ContainerResponseFilter;
import javax.ws.rs.core.Cookie;
import javax.ws.rs.core.NewCookie;
import javax.ws.rs.core.Response;
import javax.ws.rs.ext.ExceptionMapper;
import javax.ws.rs.ext.Provider;

import org.apache.commons.io.IOUtils;
import org.apache.commons.lang3.StringUtils;
import org.apache.log4j.Logger;
import org.json.JSONObject;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.vsoftcorp.usermgmt.constants.AppConstants;
import com.vsoftcorp.usermgmt.constants.Status;
import com.vsoftcorp.usermgmt.dao.SuperAdminDao;
import com.vsoftcorp.usermgmt.dao.UserDao;
import com.vsoftcorp.usermgmt.exceptions.UserMgmtException;
import com.vsoftcorp.usermgmt.model.InstituteParams;
import com.vsoftcorp.usermgmt.model.InstitutionMaster;
import com.vsoftcorp.usermgmt.model.LoginMaster;
import com.vsoftcorp.usermgmt.res.VsoftResponse;
import com.vsoftcorp.usermgmt.utils.PropertyUtil;
import com.vsoftcorp.usermgmt.utils.SecurityUtils;

/**
 * This is the rest interceptor which executes around every API call
 * @author sguggilla
 *
 */
@Provider
public class RestInterceptor implements ContainerRequestFilter, ContainerResponseFilter, ExceptionMapper<Throwable> {

	private static final Logger logger = Logger.getLogger(RestInterceptor.class);


	@Inject
	private UserDao dao; 

	@Inject
	SuperAdminDao superAdminDao;

	/**
	 * This will execute before every call and it just logs the request details
	 */
	public void filter(ContainerRequestContext context) throws IOException {
		
		// Get the Request URL
		String url = context.getUriInfo().getPath();

		// Get the Request body
		String json = IOUtils.toString(context.getEntityStream());
		
		logger.info("Request method >>> " + context.getMethod() + 
				"; Requset URI >>> " + context.getUriInfo().getPath() + 
				"; Request Body >>> " + json + "\n");
		
		// If session management is required
		if("true".equals(PropertyUtil.getProperty("IS_SESSION_REQUIRED"))) {
			
			/*
			 * Except before login url's, check the session validity
			 */
			if(	!StringUtils.endsWith(url, "/users/login") && 
					!StringUtils.contains(url, "/users/forgotPassword/")) {
				
					logger.info("context.getCookies()>>>>>>>>>>>"+context.getCookies());
					Cookie cookie = context.getCookies().get(AppConstants.USER_IDENTIFIER);
					
					// Prepare the Unauthorized Response object
					VsoftResponse response = new VsoftResponse();
					response.setStatusCode(Status.STATUSCODE_UNATHORIZED);
					response.setStatus(Status.STATUS_UNATHORIZED);
					
					// If no cookie found in request header with the name user identifier
					if(cookie == null) {
						response.setMessage("No cookie exists");
						context.abortWith(Response.status(Response.Status.UNAUTHORIZED).
								entity(response).build());
						logger.error("No cookie exists");
						return;
					}
					
					String cookieVal = cookie.getValue();
					// Get the Login session id from the request header cookie
					Long loginSesId = Long.parseLong(SecurityUtils.decode(PropertyUtil.getProperty("HS256_KEY"), 
															cookieVal));
					
					// Get the Login Master object from the id
					LoginMaster loginMaster = dao.getLoginMaster(loginSesId);
					
					
					if(loginMaster != null) {
						
						// If the user logged in
						if(AppConstants.TRUE_CHAR.equals(loginMaster.getInOutInd())) {
							
							// Get the institution id from Login Master object
							Long instId = loginMaster.getInstId().getInstId();
							
							logger.info("instId>>>>>"+instId);
							
							InstitutionMaster institutionMaster = new InstitutionMaster();
							institutionMaster.setInstId(1l);
							
							// Get the session expiry time for this institution
							InstituteParams sessionExpiryTimeParam = superAdminDao.getInstituteParams(
									institutionMaster, AppConstants.SESSION_EXPIRY_TIME);
							
							Long sessionExpiryTime = Long.parseLong(sessionExpiryTimeParam.getParamValue());
							
							Date curDate		= new Date();
							Long sessionTime 	= loginMaster.getSessionTime().getTime();// In milli seconds
							Long curTime		= curDate.getTime();// In milli seconds
							Long diff			= (curTime - sessionTime) / 1000L;// In seconds
							
							// If the session expired, update the login master as session expired
							if(diff > sessionExpiryTime) {
								loginMaster.setInOutDate(curDate);
								loginMaster.setSessionTime(curDate);
								loginMaster.setInOutInd(AppConstants.FALSE_CHAR);
								
								dao.updateLoginMaster(loginMaster);
								
								response.setMessage("Session Expired");
								context.abortWith(Response.status(Response.Status.UNAUTHORIZED).
										entity(response).build());
								logger.error("Session Expired");
								
								return;
							}
						} else {
							// If already logged out
							response.setMessage("Already logged out");
							context.abortWith(Response.status(Response.Status.UNAUTHORIZED).
									entity(response).build());
							logger.error("Already logged out");
							return;
						}
					} else {
						
						// If no session exists
						response.setMessage("No session exists");
						context.abortWith(Response.status(Response.Status.UNAUTHORIZED).
												entity(response).build());
						logger.error("No session exists");
						return;
					}
					
					// Decrypt the request body if exists
					if(StringUtils.isNotBlank(json)) {
						json = SecurityUtils.decodeToJSON(cookieVal, 
											new JSONObject(json).getString("data")).toString();
					}
				}
		}
		
		logger.info("After decryption, the request body : " + json);
		// Re-assign the request body again to the request as we have detached for logging 
		context.setEntityStream(IOUtils.toInputStream(json));
	}

	/**
	 * This will execute after the call response and it just logs the response details
	 */
	public void filter(ContainerRequestContext reqContext,
			ContainerResponseContext resContext) throws IOException {
		
		// Get the request URL
		String url = reqContext.getUriInfo().getPath();

		// Get the Response Body
		String json = new ObjectMapper().writerWithDefaultPrettyPrinter()
				.writeValueAsString(resContext.getEntity());

		logger.info("Request method >>> " + reqContext.getMethod() + 
				"; Requset URI >>> "+ url + 
				"; Response object >>> \n" + json + "\n");
		
		// If session management is required
		if("true".equals(PropertyUtil.getProperty("IS_SESSION_REQUIRED"))) {
			
			// If the request is unauthorized
			if(resContext.getStatus() == Response.Status.UNAUTHORIZED.getStatusCode()) {
				return;
			}
			
			// If the Request ends with unknown error
			if(resContext.getStatus() == Response.Status.INTERNAL_SERVER_ERROR.getStatusCode()) {
				return;
			}
			
			 // After login success, we are putting session id in cookies
			if(StringUtils.endsWith(url, "/users/login")) {
				
				JSONObject respObj = new JSONObject(json);
				
				// If Login failed
				if(Status.STATUSCODE_FAIL.intValue() == respObj.getInt("statusCode")) {
					return;
				}
				
				JSONObject data = respObj.getJSONObject("data");
				
				// If login success, then create a request header cookie
				resContext.getHeaders().add("Set-Cookie", new NewCookie(AppConstants.USER_IDENTIFIER, 
						data.getString("loginSessionId")) {

					public int getMaxAge() {
						return 24 * 60 * 60;
					}

					public boolean isHttpOnly() {
						return false;
					}

					public boolean isSecure() {
						return false;
					}

					public String getPath() {
						return "/";
					}

					public String getDomain() {
						return PropertyUtil.getProperty("COOKIE_DOMAIN");
					}
				});
				
			} else if (StringUtils.contains(url, "/logout/")) {
				
				// At the time of logout, remove the cookie
				resContext.getCookies().remove(AppConstants.USER_IDENTIFIER);
				
				
			} else if (StringUtils.contains(url, "/users/forgotPassword/")) {
				
				// Exclude the forgot password url as it is not contain session
				
			} else {
				// If the user is accessing after login urls
				
				// get the Login session id for the request
				Long loginSesId = Long.parseLong(SecurityUtils.decode(PropertyUtil.getProperty("HS256_KEY"), 
						reqContext.getCookies().get(AppConstants.USER_IDENTIFIER).getValue()));

				// Get the Login Master Object from the id
				LoginMaster loginMaster = dao.getLoginMaster(loginSesId);
				
				if(loginMaster != null) {
					
					// Update the Login master for every request hit
					loginMaster.setSessionTime(new Date());
					
					dao.updateLoginMaster(loginMaster);
					
				} else {
					logger.error("No session identified while updating the login session");
				}
			}
		}
	}

	/**
	 * This will execute is exception occurred for any request processing then it will be logged  
	 */
	public Response toResponse(Throwable t) {
		VsoftResponse response = new VsoftResponse();
		logger.error("Exception occured in the call", t);
		
		// If the user defined exception occurred
		if(t instanceof UserMgmtException) {
			response.setStatusCode(Status.STATUSCODE_FAIL);
			response.setMessage(((UserMgmtException)t).getErroMsg());
			response.setStatus(Status.STATUS_FAIL);
			return Response.serverError().entity(response).build();
		} else {
			// If Unknown and un-handled exception occured
			response.setStatusCode(Status.STATUSCODE_ERROR);
			response.setMessage(PropertyUtil.getProperty("UNKNOWN_ERROR_MSG"));
			response.setStatus(Status.STATUS_ERROR);
			return Response.serverError().status(Response.Status.UNAUTHORIZED).entity(response).build();
		}
	}

}