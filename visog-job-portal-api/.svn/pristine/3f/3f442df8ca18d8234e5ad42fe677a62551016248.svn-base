package com.vsoftcorp.usermgmt.serviceimpl;


import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;

import javax.inject.Inject;
import javax.inject.Singleton;

import org.apache.commons.lang3.StringUtils;
import org.apache.log4j.Logger;

import com.vsoftcorp.usermgmt.constants.AppConstants;
import com.vsoftcorp.usermgmt.dao.ReportDao;
import com.vsoftcorp.usermgmt.model.LoginMaster;
import com.vsoftcorp.usermgmt.model.User;
import com.vsoftcorp.usermgmt.req.LoginReportReq;
import com.vsoftcorp.usermgmt.res.AuditLoginResponse;
import com.vsoftcorp.usermgmt.res.SuccessReportResponse;
import com.vsoftcorp.usermgmt.res.reports.FailureReportResponse;
import com.vsoftcorp.usermgmt.service.ReportService;
import com.vsoftcorp.usermgmt.servlet.FormatingDate;
import com.vsoftcorp.usermgmt.utils.DateUtils;
import com.vsoftcorp.usermgmt.utils.PropertyUtil;

@Singleton
public class ReportServiceImpl implements ReportService{

	private static final Logger logger = Logger.getLogger(ReportServiceImpl.class);

	@Inject
	private ReportDao dao;
	
	@Inject
	FormatingDate formatingDate;
	
	/*@Inject
	User user;*/
	
	/**
	 * This method fetches the Audit Login details for all the users
	 */
	public List<AuditLoginResponse> getAuditLoginReport() {
		
		List<LoginMaster> loginMasterList = dao.getAuditLoginReport();
		
		AuditLoginResponse response = null;
		List<AuditLoginResponse> responses = new ArrayList<>();

		SimpleDateFormat dateFormat = new SimpleDateFormat(PropertyUtil.getProperty("APP_DATETIME_FORMAT"));
		
		for (LoginMaster loginMaster : loginMasterList) {
			response = new AuditLoginResponse();
			
			User userObj = loginMaster.getUserId();
			
			if(userObj != null) {
				if(userObj.getFirstName() != null) {
					response.setFirstName(userObj.getFirstName());
				} 				
				
				if(userObj.getMiddleName() != null) {
					response.setMiddleName(userObj.getMiddleName());
				}
				
				if(userObj.getLastName() != null) {
					response.setLastName(userObj.getLastName());
				}
				
				if(userObj.getUserId() != null) {
					response.setUserId(userObj.getUserId());
				}
			}
			
			if(loginMaster.getEmailId() != null) {
				response.setEmailId(loginMaster.getEmailId());
			}
			response.setCreatedOn(dateFormat.format(loginMaster.getCreatedOn()));
			response.setInstId(loginMaster.getInstId().getInstId());
			response.setName(loginMaster.getInstId().getName());
			response.setRtNum(loginMaster.getInstId().getRtNum());
			response.setLoginMasterId(loginMaster.getLoginMasterId());
			response.setSuccessInd(AppConstants.TRUE_CHAR.equals(loginMaster.getSuccessInd()));
			
			if(loginMaster.getSessionTime() != null) {
				response.setSessionTime(dateFormat.format(loginMaster.getSessionTime()));
			}
			
			if(loginMaster.getInOutDate() != null) {
				response.setInOutDate(dateFormat.format(loginMaster.getInOutDate()));
			}
			
			if(loginMaster.getLastLoginDate() != null) {
				response.setLastLoginDate(dateFormat.format(loginMaster.getLastLoginDate()));
			}
			
			response.setInOutInd(AppConstants.TRUE_CHAR.equals(loginMaster.getInOutInd()));
			responses.add(response);
		}
		return responses;
				
	}

	/**
	 * This method fetches the Success Login attempts for the given user by using userId
	 */
	public List<SuccessReportResponse> getSuccessLoginAttemptsReport(LoginReportReq loginReportReq) {
		
		SimpleDateFormat sdfOut = new SimpleDateFormat("dd/MM/yyyy");
		
		Date startDate = null;
		Date endDate = null;
		try {
			startDate = sdfOut.parse(loginReportReq.getStartDate());
			endDate = DateUtils.getEndDate(loginReportReq.getEndDate());
			
		}  catch (ParseException e) {
			logger.error("Exception occured while parsing", e);
		}
		
		List<LoginMaster> loginMasterList = dao.getSuccessLoginAttemptsReport(startDate, endDate);
		
		SuccessReportResponse response = null;
		List<SuccessReportResponse> responses = new ArrayList<>();
		
		SimpleDateFormat dateFormat = new SimpleDateFormat(PropertyUtil.getProperty("APP_DATETIME_FORMAT"));
		
		for (LoginMaster loginMaster : loginMasterList) {
			response = new SuccessReportResponse();
			User userObj = loginMaster.getUserId();
			
			response.setEmailId(loginMaster.getEmailId());	
			
			if(userObj != null && StringUtils.isNotBlank(userObj.getFirstName())) {
				response.setFirstName(userObj.getFirstName());
				
				response.setMiddleName(userObj.getMiddleName());
				
				response.setLastName(userObj.getLastName());
				
				response.setUserId(userObj.getUserId());
			} else {
				continue;
			}
			response.setLoginDate(dateFormat.format(loginMaster.getLastLoginDate()));
			response.setRtNum(loginMaster.getInstId().getRtNum());
			
			responses.add(response);
		}
		return responses;
	}
	
	
	/**
	 * Get Login Failure Attempts for the given user
	 */
	public List<FailureReportResponse> getFailureLoginAttemptsReport(
			Long userId, LoginReportReq loginReportReq) {

		SimpleDateFormat sdfOut = new SimpleDateFormat(PropertyUtil.getProperty("APP_DATE_FORMAT"));

		User user = null;
		user = new User();
		user.setUserId(userId);
		FailureReportResponse response = null;

		List<LoginMaster> loginMasterlist = null;
		try {
			loginMasterlist = dao.getFailureLoginAttemptsReport(user,
					sdfOut.parse(loginReportReq.getStartDate()),DateUtils.getEndDate(loginReportReq.getEndDate()));
		} catch (ParseException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		logger.info("Login Masterlist size----------->" + loginMasterlist.size());

		SimpleDateFormat resFormatter = new SimpleDateFormat(PropertyUtil.getProperty("APP_DATETIME_FORMAT"));
		LoginMaster latestLoginMaster = dao.lastSuccessLogin(user);

		List<FailureReportResponse> responseList = new ArrayList<>();

		for (LoginMaster loginMaster : loginMasterlist) {

			user = loginMaster.getUserId();

			if (user != null) {

				response = new FailureReportResponse();
				response.setFirstName(user.getFirstName());
				response.setMiddleName(user.getMiddleName());
				response.setLastName(user.getLastName());
				response.setMailId(user.getEmailId());
				response.setUserId(user.getUserId());

			}
			if (latestLoginMaster != null) {
				Date latestlogin = latestLoginMaster.getLastLoginDate();
				logger.info("latestlogin in service-->" + latestlogin);
				response.setLastLoginDate(resFormatter.format(latestlogin));
			}

			response.setRtNum(loginMaster.getInstId().getRtNum());

			responseList.add(response);
		}
		return responseList;
	}

	/**
	 * Get Login Failure Attempts for All users
	 */

	@Override
	public List<FailureReportResponse> getFailureLoginAttemptsReportForAll(
			LoginReportReq loginReportReq) {

		SimpleDateFormat sdfOut = new SimpleDateFormat(PropertyUtil.getProperty("APP_DATE_FORMAT"));

		FailureReportResponse response = null;
		User user = null;
		Date latestlogin = null;
		List<LoginMaster> loginMasterlist = null;
		try {
			loginMasterlist = dao.getFailureLoginAttemptsReportForAll(sdfOut.parse(loginReportReq.getStartDate())
					,DateUtils.getEndDate(loginReportReq.getEndDate()));
		} catch (ParseException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		logger.info("Login Masterlist size----------->"	+ loginMasterlist.size());

		SimpleDateFormat resFormatter = new SimpleDateFormat(PropertyUtil.getProperty("APP_DATETIME_FORMAT"));
		LoginMaster latestLoginMaster = null;

		List<FailureReportResponse> responseList = new ArrayList<>();

		for (LoginMaster loginMaster : loginMasterlist) {

			logger.info("lomaster id=========="	+ loginMaster.getLoginMasterId());
			user = loginMaster.getUserId();
			logger.info("user in service-->" + user);

			if (user == null) {
				continue;
			}	
							latestLoginMaster = dao.lastSuccessLogin(user);
							response = new FailureReportResponse();
							response.setFirstName(user.getFirstName());
							response.setMiddleName(user.getMiddleName());
							response.setLastName(user.getLastName());
							response.setMailId(user.getEmailId());
							response.setUserId(user.getUserId());
							if (latestLoginMaster != null) {
								latestlogin = latestLoginMaster.getLastLoginDate();
								response.setLastLoginDate(resFormatter.format(latestlogin));
							}

			response.setRtNum(loginMaster.getInstId().getRtNum());

			responseList.add(response);
		}

		return responseList;

	}

}
