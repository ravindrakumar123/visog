package com.vsoftcorp.usermgmt.daoimpl;

import java.util.ArrayList;
import java.util.Date;
import java.util.List;

import javax.inject.Singleton;
import javax.persistence.EntityManager;
import javax.persistence.PersistenceContext;
import javax.persistence.criteria.CriteriaBuilder;
import javax.persistence.criteria.CriteriaQuery;
import javax.persistence.criteria.Predicate;
import javax.persistence.criteria.Root;
import javax.transaction.Transactional;

import org.apache.log4j.Logger;

import com.vsoftcorp.usermgmt.dao.ReportDao;
import com.vsoftcorp.usermgmt.model.LoginMaster;
import com.vsoftcorp.usermgmt.model.User;

@Singleton
@Transactional
public class ReportDaoImpl implements ReportDao{
	@PersistenceContext(unitName = "VsoftUserManagement")
	private EntityManager em;

	private static final Logger logger = Logger.getLogger(ReportDaoImpl.class);
	
	/**
	 * This method returns all the users between the startDate and endDate
	 */
	@SuppressWarnings("unchecked")
	public List<User> getUsersBetweenDates(Date startDate, Date endDate) {
		return (List<User>) em.createQuery(
	                    "SELECT user FROM User user where user.createdOn BETWEEN :startDate AND :endDate")
	            .setParameter("startDate",startDate)
	            .setParameter("endDate",endDate)
	            .getResultList();
	}

	/**
	 * This method returns all the users for the specified date
	 */
	@SuppressWarnings("unchecked")
	public List<User> getUsersForDate(Date createOnStartDate, Date createOnEndDate) {
	
		return (List<User>) em.createQuery(
	                    "SELECT user FROM User user where user.createdOn BETWEEN :startDate AND :endDate")
	            .setParameter("startDate",createOnStartDate)
	            .setParameter("endDate",createOnEndDate)
	            .getResultList();
	}

	/**
	 * This method returns all the user details for the specified request
	 */
	public List<User> getUsersWithSearch(Date createOnStartDate,Date createOnEndDate, String emailId, 
			String firstName,String lastName, String mobileNo) {
		
		CriteriaBuilder qb = em.getCriteriaBuilder();
		CriteriaQuery<User> cq = qb.createQuery(User.class);
		Root<User> users = cq.from(User.class);

		List<Predicate> predicates = new ArrayList<Predicate>();
		if(emailId != null){
			predicates.add(qb.equal(users.get("emailId"), emailId));
		}
		if(mobileNo != null){
			predicates.add(qb.equal(users.get("mobileNo"), mobileNo));
		}
		if(firstName != null){
			predicates.add(qb.like(qb.lower(users.get("firstName")), "%"+firstName.toLowerCase()+"%"));
		}
		if(lastName != null){
			predicates.add(qb.like(qb.lower(users.get("lastName")), "%"+lastName.toLowerCase()+"%"));
		}
		
		Predicate startPredicate = null;
		Predicate endPredicate = null;
		
		if(createOnStartDate != null){
			startPredicate = qb.or(qb.greaterThanOrEqualTo(users.<Date>get("createdOn"), createOnStartDate));
		} 
		if(createOnEndDate != null){
			endPredicate = qb.or(qb.lessThanOrEqualTo(users.<Date>get("createdOn"), createOnEndDate));
		}
		if(startPredicate != null && endPredicate != null) {
			predicates.add(qb.and(startPredicate, endPredicate));
		} else if (startPredicate == null && endPredicate != null) {
			predicates.add(qb.and(endPredicate));
		} else if(startPredicate != null && endPredicate == null) {
			predicates.add(qb.and(startPredicate));
		} 

		cq.select(users);

		cq.where(qb.or(predicates.toArray(new Predicate[] {})));

		return em.createQuery(cq).getResultList();
	}

	/**
	 * This method returns all the Login user details according to the latest to the old login  
	 */
	public List<LoginMaster> getAuditLoginReport() {
		
		CriteriaBuilder qb = em.getCriteriaBuilder();
		CriteriaQuery<LoginMaster> cq = qb.createQuery(LoginMaster.class);
		Root<LoginMaster> loginMaster = cq.from(LoginMaster.class);
		
		cq.select(loginMaster);

		cq.orderBy(qb.desc(loginMaster.get("createdOn")));
		  
		return em.createQuery(cq).getResultList();
	}

	/**
	 * This method returns all the user success login attempts for the specified user
	 */
	public List<LoginMaster> getSuccessLoginAttemptsReport(User user) {
		
		CriteriaBuilder qb = em.getCriteriaBuilder();
		CriteriaQuery<LoginMaster> cq = qb.createQuery(LoginMaster.class);
		Root<LoginMaster> loginMaster = cq.from(LoginMaster.class);
		
		cq.select(loginMaster);

		cq.where(qb.equal(loginMaster.get("userId"), user));

		return em.createQuery(cq).getResultList();
	}
	/**
	 * Get User Login Failure Attempts
	 */
	public List<LoginMaster> getFailureLoginAttemptsReport(Long instId, User user) {
		
		CriteriaBuilder qb = em.getCriteriaBuilder();
		CriteriaQuery<LoginMaster> cq = qb.createQuery(LoginMaster.class);
	    Root<LoginMaster> root  = cq.from(LoginMaster.class);			

	    List<Predicate> predicates = new ArrayList<Predicate>();

        predicates.add(qb.equal(root.get("userId"), user));
        predicates.add(qb.equal(root.get("successInd"), "0"));

        cq.select(root);

	    cq.where(qb.and(predicates.toArray(new Predicate[]{})));
	    
	    List<LoginMaster> list=em.createQuery(cq).getResultList();
	    
	    System.out.println("login master size -------->"+list.size());
	    
		return list;
		
		
	}

}
